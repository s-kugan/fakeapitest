{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-28T00:09:43.676Z",
    "end": "2018-10-28T00:09:45.946Z",
    "duration": 2270,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "54e88c6c-3204-4984-9534-4e4058f7c37b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "8a4a8efe-4646-49c4-bb3d-a0fee410308c",
        "title": "Test Fake API",
        "fullFile": "C:\\Engage\\podium.homestead\\Code\\podium.api\\tests\\FakeAPITest\\fakeapitest.spec.js",
        "file": "\\fakeapitest.spec.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Test Fake API \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "/** flush the cache to run the test repeately*/\nflush();",
            "err": {},
            "isRoot": false,
            "uuid": "90bbb61d-73cc-43ba-8874-d7d525627d4d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "1-Get all the posts",
            "fullTitle": "Test Fake API 1-Get all the posts",
            "timedOut": false,
            "duration": 172,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).get(methods.Getposts)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err,res) {\n        if (err) return done(err);\n        let body = res.body;\n        /** validate that api returns the status code 200 and body returns an array*/\n        expect(res).to.have.property('status').equals(200);\n        expect(body).to.be.an('array').that.is.not.empty;\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "cb5d3687-184a-4bea-9ef4-20db08a7c613",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "2-Get the comments for post 1",
            "fullTitle": "Test Fake API 2-Get the comments for post 1",
            "timedOut": false,
            "duration": 125,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).get(methods.Getcomments)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err,res) {\n        if (err) return done(err);\n        let body = res.body;\n        expect(res).to.have.property('status').equals(200);\n        expect(body).to.be.an('array').that.is.not.empty;\n        /** validate that comments are less than 10000 records*/\n        expect(body).to.have.lengthOf.below(10000);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8dad241a-7c88-44b6-8771-47b13602d672",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "3-Post with Post method",
            "fullTitle": "Test Fake API 3-Post with Post method",
            "timedOut": false,
            "duration": 264,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).post(methods.PostPost)\n    .set('Content-Type','application/json')\n    .send(postdata)\n    .expect('Content-Type',/json/)\n    .expect(201)\n    .end(function(err,res) {\n        if (err) return done(err);\n        let body = res.body;\n        /** validate that it created data by returning the status code 201*/\n        expect(res).to.have.property('status').equals(201);\n        expect(body).to.deep.include(postdata);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "47cafd84-d417-4ba8-9533-211db3a3a332",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "4-Update the post with Put Method",
            "fullTitle": "Test Fake API 4-Update the post with Put Method",
            "timedOut": false,
            "duration": 254,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).put(methods.PutPost)\n    .set('Content-Type','application/json')\n    .send(putdata)\n    .expect('Content-Type',/json/)\n    .expect(200)\n    .end(function(err,res) {\n        let body = res.body;\n        if (err) return done(err);\n        /** validate that it updated data by returning the status code 200*/\n        expect(res).to.have.property('status').equals(200);\n        expect(body).to.deep.include(putdata);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "f5470978-d53d-40a9-9cf9-3848d4b2d3c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "5-Partially update the post with PATCH Method",
            "fullTitle": "Test Fake API 5-Partially update the post with PATCH Method",
            "timedOut": false,
            "duration": 235,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).patch(methods.PatchPost)\n    .set('Content-Type','application/json')\n    .send(patchdata)\n    .expect('Content-Type',/json/)\n    .expect(200)\n    .end(function(err,res) {\n       let body = res.body;\n        if (err) return done(err);\n        /** validate that it updated data by returning the status code 200*/\n        expect(res).to.have.property('status').equals(200);\n        expect(body).to.deep.include(patchdata);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "449cbec6-7a7e-4e94-bfb0-f761dba15372",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "6-Delete the post with Delete Method",
            "fullTitle": "Test Fake API 6-Delete the post with Delete Method",
            "timedOut": false,
            "duration": 1028,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).delete(methods.DeletePost)\n    .set('Content-Type','application/json')\n    .expect('Content-Type',/json/)\n    .expect(200)\n    .end(function(err,res) {\n        console.log(res.body);\n        if (err) return done(err);\n        /** validate that it successfully deleted the data by returning the status code 200*/\n        expect(res).to.have.property('status').equals(200);\n        done();\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "46187f9b-2280-46b4-85e7-1d56de670083",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "7-confirm the deleted posts1 does not exist with the same data",
            "fullTitle": "Test Fake API 7-confirm the deleted posts1 does not exist with the same data",
            "timedOut": false,
            "duration": 110,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request(url).get(methods.GetPost)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err,res) {\n        if (err) return done(err);\n        let body = res.body;\n        console.log(\"*****\");\n        console.log(body);\n        /** validate that api returns the status code 200 and objects are not same*/\n        expect(res).to.have.property('status').equals(200);\n        expect(body).to.not.include(post1data);\n        done();\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "7d64c26f-a569-4235-b3ab-bb924125d0e8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "cb5d3687-184a-4bea-9ef4-20db08a7c613",
          "8dad241a-7c88-44b6-8771-47b13602d672",
          "47cafd84-d417-4ba8-9533-211db3a3a332",
          "f5470978-d53d-40a9-9cf9-3848d4b2d3c9",
          "449cbec6-7a7e-4e94-bfb0-f761dba15372",
          "46187f9b-2280-46b4-85e7-1d56de670083",
          "7d64c26f-a569-4235-b3ab-bb924125d0e8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2188,
        "root": false,
        "rootEmpty": false,
        "_timeout": 15000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 15000
  },
  "copyrightYear": 2018
}